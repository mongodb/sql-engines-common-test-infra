# This file contains common Rust-related functions and tasks that are useful across multiple SQL
# Engines Evergreen projects. The functions in this config file depend on one or more of the
# following expansions:
#  - prepare_shell - a script or sequence of commands to run before the function
#  - release_version - the release version of the project using this config
#  - triggered_by_git_tag - the name of the tag that triggered this version, if available
#                         - provided automatically by Evergreen in certain circumstances
#  - working_dir - the working directory in which a function should run

functions:
  # This function runs the clippy linter against a Rust project
  "check clippy":
    - command: subprocess.exec
      params:
        working_dir: ${working_dir}
        add_to_path:
          - ${CARGO_BIN}
        binary: sh
        args:
          - ./evergreen/scripts/check_clippy.sh

  # This function enforces rustfmt against a Rust project using cargo fmt
  "check rustfmt":
    - command: subprocess.exec
      params:
        working_dir: ${working_dir}
        add_to_path:
          - ${CARGO_BIN}
        binary: sh
        args:
          - ./evergreen/scripts/check_rustfmt.sh

  # This function ensures a Rust project does not contain unused dependencies
  # using cargo-machete
  "check unused dependencies":
    - command: subprocess.exec
      params:
        working_dir: ${working_dir}
        add_to_path:
          - ${CARGO_BIN}
        binary: sh
        args:
          - ./evergreen/scripts/check_unused_dependencies.sh

  # This function installs Rust in a platform-independent manner
  "install rust toolchain":
    - command: subprocess.exec
      params:
        working_dir: ${working_dir}
        add_to_path:
          - ${CARGO_BIN}
        binary: sh
        args:
          - ./evergreen/scripts/install_rust_toolchain.sh

  # This function executes cargo test with the provided flags via the
  # "cargo_test_flags argument, e.g. "-- --ignored", etc. Note that any
  # integration set-up, such as deploying mongod or ADF and/or loading
  # data should be done before invoking this function.
  #
  # Arguments:
  #   - cargo_test_flags - flags passed to the `cargo test` command
  #   - description - a description of the tests being executed
  "run rust tests":
    - command: subprocess.exec
      params:
        working_dir: ${working_dir}
        add_to_path:
          - ${CARGO_BIN}
        include_expansions_in_env:
          - cargo_test_flags
          - description
        binary: sh
        args:
          - ./evergreen/scripts/run_rust_tests.sh

  # This function sets and checks the package version for the argued package.
  #
  # Arguments:
  #   - cargo_file - the path to the Cargo.toml file that is the source of the
  #                  version
  #   - package_name - the name of the package being set and checked
  "set and check packages version":
    - command: subprocess.exec
      params:
        working_dir: ${working_dir}
        add_to_path:
          - ${CARGO_BIN}
        include_expansions_in_env:
          - cargo_file
          - package_name
          - release_version
          - triggered_by_git_tag
        binary: sh
        args:
          - ./evergreen/scripts/run_rust_tests.sh

# todo:
#   - compile * (Rust)
#   - run data-loader

tasks:
  - name: clippy
    commands:
      - func: "install rust toolchain"
      - func: "check clippy"

  - name: rustfmt
    commands:
      - func: "install rust toolchain"
      - func: "check rustfmt"

  - name: unused-dependencies
    commands:
      - func: "install rust toolchain"
      - func: "check unused dependencies"
