# This file contains common SSDLC-related functions and tasks that are useful across multiple
# SQL Engines Evergreen projects. The functions in this config file depend on one or more of the
# following expansions:
#  - working_dir - the working directory in which a function should run
#  - release_version - the version (snapshot or release version) of the product being built
#  - author - the author of the changes (set by Evergreen)
#  - author_email - the email of the author of the changes (set by Evergreen)
#  - COMPLIANCE_REPORT_NAME - the name of the compliance report being generated
#  - STATIC_CODE_ANALYSIS_NAME - the name of the file to output semgrep static analysis

variables:
  - &rust_subprocess_default_params
      working_dir: ${working_dir}
      binary: bash

functions:
  "generate compliance report":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: ${working_dir}
        include_expansions_in_env:
          - release_version
          - template_filepath
        script: |
          echo "Author = ${author}"
          echo "Author email = ${author_email}"
          echo "Version = ${release_version}"

          SBOM_URL="https://translators-connectors-releases.s3.amazonaws.com/eap/${working_dir}/${working_dir}-${release_version}.sbom.json"
          SARIF_URL="https://translators-connectors-releases.s3.amazonaws.com/eap/${working_dir}/${working_dir}-${release_version}.sast.sarif"

          echo "Sbom url = $SBOM_URL"
          echo "Sarif Url = $SARIF_URL"

          echo "----- Generating ${COMPLIANCE_REPORT_NAME} -----"

          # Copy template
          echo "Copying template file from ${template_filepath} to ${COMPLIANCE_REPORT_NAME}"
          cp ${template_filepath} ${COMPLIANCE_REPORT_NAME}

          # Update the version
          echo "Update the version"
          echo "sed -i.bu "s,%VERSION%,${version},g" ${COMPLIANCE_REPORT_NAME}"
          sed -i.bu "s,%VERSION%,${version},g" ${COMPLIANCE_REPORT_NAME}

          # Update the SBOM link
          echo "Update the SBOM link"
          echo "sed -i.bu "s,%SBOM_URL%,$SBOM_URL,g"${COMPLIANCE_REPORT_NAME}"
          sed -i.bu "s,%SBOM_URL%,$SBOM_URL,g" ${COMPLIANCE_REPORT_NAME}

          # Update the SARIF link
          echo "Update the SARIF link"
          echo "sed -i.bu "s,%SARIF_URL%,$SARIF_URL,g" ${COMPLIANCE_REPORT_NAME}"
          sed -i.bu "s,%SARIF_URL%,$SARIF_URL,g" ${COMPLIANCE_REPORT_NAME}

          # Update the author information
          echo "Update the author name"
          echo "sed -i.bu "s,%AUTHOR%,${author},g" ${COMPLIANCE_REPORT_NAME}"
          sed -i.bu "s,%AUTHOR%,${author},g" ${COMPLIANCE_REPORT_NAME}

          echo "update the author email"
          echo "sed -i.bu "s,%AUTHOR_EMAIL%,${author_email},g" ${COMPLIANCE_REPORT_NAME}"
          sed -i.bu "s,%AUTHOR_EMAIL%,${author_email},g" ${COMPLIANCE_REPORT_NAME}
          echo "---------------------------"
    - command: s3.put
      params:
        # SQL-2918: we should use aws assume role instead once all the projects are set up this way.
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${working_dir}/${COMPLIANCE_REPORT_NAME}
        remote_file: ${working_dir}/artifacts/${version_id}/ssdlc/${COMPLIANCE_REPORT_NAME}
        content_type: text/markdown
        bucket: mciuploads
        permissions: public-read
    
  "scan SBOM":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: ${working_dir}
        script: |
          ${prepare_shell}

          echo ">>>> Scan SBOM for vulnerabilities..."
          if [[ "$ALLOW_VULNS" != "" ]]; then
            echo "Vulnerability ids to ignore : $ALLOW_VULNS"

            echo "-- Generate .grype.yaml specifying vulnerabilities to ignore --"
            GRYPE_CONF_FILE=".grype.yaml"
            touch $GRYPE_CONF_FILE
            echo "ignore:" > $GRYPE_CONF_FILE

            IFS=','; for VULN_ID in $ALLOW_VULNS; do
              echo "Ignoring vulnerability with id $VULN_ID"
              echo "    - vulnerability: $VULN_ID" >> $GRYPE_CONF_FILE
            done
            echo "------------------------------------"
          fi

          echo "-- Scanning dependency for vulnerabilities --"
          ./$SBOM_DIR/grype sbom:$SBOM_LICENSES --fail-on low
          echo "---------------------------------------------"
          echo "<<<< Done scanning SBOM"

  "generate static code analysis":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: ${working_dir}
        script: |
          ${prepare_shell}
          export SEMGREP_APP_TOKEN=${semgrep_app_token}
          echo "Running static code analysis with Semgrep..."

          # Setup or use the existing virtualenv for semgrep
          if [[ -f "venv/bin/activate" ]]; then
              echo 'using existing virtualenv'
              . venv/bin/activate
          else
              echo 'Creating new virtualenv'
              python3 -m virtualenv venv
              echo 'Activating new virtualenv'
              . venv/bin/activate
          fi
          python3 -m pip install semgrep
          # Confirm semgrep version
          semgrep --version
          set +e
          semgrep --config p/rust --sarif --exclude "integration_test" --verbose --error --severity=ERROR --sarif-output=${STATIC_CODE_ANALYSIS_NAME} > ${STATIC_CODE_ANALYSIS_NAME}.cmd.verbose.out 2>&1
          SCAN_RESULT=$?
          set -e
          # Exit with a failure if the scan found an issue
          exit $SCAN_RESULT
    - command: s3.put
      params:
        # SQL-2918: we should use aws assume role instead once all the projects are set up this way.
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - ${STATIC_CODE_ANALYSIS_NAME}*
        remote_file: ${working_dir}/artifacts/${version_id}/ssdlc/
        content_type: text/plain
        bucket: mciuploads
        permissions: public-read

  "publish static code analysis":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${working_dir}/papertrail/${STATIC_CODE_ANALYSIS_NAME}
        remote_file: ${working_dir}/artifacts/${version_id}/ssdlc/${STATIC_CODE_ANALYSIS_NAME}
        content_type: application/json
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: ${working_dir}/papertrail/${STATIC_CODE_ANALYSIS_NAME}
        remote_file: ${working_dir}/artifacts/${version_id}/ssdlc/${STATIC_CODE_ANALYSIS_NAME}
        content_type: application/json
        bucket: translators-connectors-releases
        permissions: public-read
        display_name: ${working_dir}-${release_version}.sast.sarif
