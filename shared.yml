functions:
  "install rust toolchain":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${prepare_shell}

          # make sure to use msvc toolchain rather than gnu, which is
          # the default for cygwin
          if [ "Windows_NT" == "$OS" ]; then
              export HOST="x86_64-pc-windows-msvc"
              export DEFAULT_HOST_OPTIONS="--default-host $HOST"
              export DEFAULT_TOOLCHAIN="stable-$HOST"
          fi

          # install rustup from scratch
          rm -rf ~/.rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path $DEFAULT_HOST_OPTIONS
          # rustup installs into C:\Users\$USER instead of
          # C:\home\$USER, so we symlink both .rustup and .cargo
          if [ "Windows_NT" == "$OS" ]; then
              ln -sf /cygdrive/c/Users/$USER/.rustup/toolchains/$DEFAULT_TOOLCHAIN ~/.rustup
              ln -sf /cygdrive/c/Users/$USER/.cargo/ ~/.cargo
              rustup toolchain install $DEFAULT_TOOLCHAIN
              rustup default $DEFAULT_TOOLCHAIN
          fi

          echo --------- rustup show -----------
          rustup show
          echo ----- Rustup toolchain list -----
          rustup toolchain list
          echo --------- Cargo version ---------
          cargo --version
          echo ---------------------------------

  "check clippy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: ${working_dir}
        script: |
          ${prepare_shell}
          cargo clippy --all-targets -- -D warnings

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: ${working_dir}
        script: |
          ${prepare_shell}
          rustfmt --check $(find . -not \( -path \./e2e-tests -prune -o -path \./target -prune \) -name \*.rs) --edition 2021

  "check unused dependencies":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: ${working_dir}
        script: |
          ${prepare_shell}
          cargo install cargo-machete
          cargo build --all-features
          set +e
          cargo machete
          RETURN=$?
          set -e
          if [ $RETURN -ne 0 ]; then
            >&2 echo "Unused dependencies found"
            >&2 cargo machete
            exit 1
          fi

  "run rust tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: ${working_dir}
        script: |
          ${prepare_shell}
          echo ${description}
          cargo test ${cargo_test_flags}

tasks:
  - name: clippy
    commands:
      - func: "install rust toolchain"
      - func: "check clippy"

  - name: rustfmt
    commands:
      - func: "install rust toolchain"
      - func: "check rustfmt"

  - name: unused-dependencies
    commands:
      - func: "install rust toolchain"
      - func: "check unused dependencies"
